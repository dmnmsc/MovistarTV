<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BuildDescriptionChannel" xml:space="preserve">
    <value>&gt;&gt;&gt; Detalles del canal &lt;&lt;&lt;
Canal de TV: {0} {1}
URL: {2}
Servicio IPTV: {3}</value>
  </data>
  <data name="BuildDescriptionDuration" xml:space="preserve">
    <value>La duración programada de la grabación era de {0}, con un margen de seguridad de {1} minutos.
El tiempo total de grabación, incluyendo los márgenes de seguridad, es de {2}.</value>
  </data>
  <data name="BuildDescriptionDurationEndsNextDay" xml:space="preserve">
    <value>La grabación finalizará al día siguiente a las {0:T}.</value>
  </data>
  <data name="BuildDescriptionDurationEndsSameDay" xml:space="preserve">
    <value>La grabación finalizará el mismo día a las {0:T}.</value>
  </data>
  <data name="BuildDescriptionDurationEndsToday" xml:space="preserve">
    <value>La grabación finalizará hoy a las {0:T}.</value>
  </data>
  <data name="BuildDescriptionDurationEndsTomorrow" xml:space="preserve">
    <value>La grabación finalizará manaña a las {0:T}.</value>
  </data>
  <data name="BuildDescriptionDurationHeader" xml:space="preserve">
    <value>&gt;&gt;&gt; Duración de la grabación &lt;&lt;&lt;</value>
  </data>
  <data name="BuildDescriptionDurationPast" xml:space="preserve">
    <value>La duración de la grabación es de {0}, con un margen de seguridad de {1} minutos.
El tiempo total de grabación, incluyendo márgenes de seguridad, será de {2}.</value>
  </data>
  <data name="BuildDescriptionScheduleHeader" xml:space="preserve">
    <value>&gt;&gt;&gt; Horario de grabación &lt;&lt;&lt;</value>
  </data>
  <data name="BuildDescriptionTaskDescription" xml:space="preserve">
    <value>Nombre de la tarea: {0}
Descripción de la tarea: {1}</value>
  </data>
  <data name="BuildDescriptionTaskName" xml:space="preserve">
    <value>Nombre de la tarea: {0}</value>
  </data>
  <data name="VerbalizeRecordDaily" xml:space="preserve">
    <value>Grabación diaria, cada {0} días a las {1:T}, con un margen de seguridad de {2} minutos.</value>
  </data>
  <data name="VerbalizeRecordDailyEveryday" xml:space="preserve">
    <value>Grabación diaria, todos los días a las {1:T}, con un margen de seguridad de {2} minutos.</value>
  </data>
  <data name="VerbalizeRecordOneTime" xml:space="preserve">
    <value>Grabación única a las {1:T}, con un margen de seguridad de {2} minutos.</value>
  </data>
  <data name="VerbalizeRecordOneTimePast" xml:space="preserve">
    <value>Grabación única, el {0:D} a las {1:T}, con un margen de seguridad de {2} minutos.</value>
  </data>
  <data name="VerbalizeRecordRightNow" xml:space="preserve">
    <value>Grabando ahora mismo.</value>
  </data>
  <data name="VerbalizeRecordRightNowPast" xml:space="preserve">
    <value>Se grabará lo antes posible.</value>
  </data>
  <data name="VerbalizeRecordWeekly" xml:space="preserve">
    <value>Grabación semanal, {3} de todas las semanas a las {1:T}, con un margen de seguridad de {2} minutos.</value>
  </data>
  <data name="VerbalizeRecordWeeklyDays" xml:space="preserve">
    <value>el </value>
    <comment>Keep trailing space!</comment>
  </data>
  <data name="VerbalizeRecordWeeklyDaysSeparatorFinal" xml:space="preserve">
    <value> y el </value>
    <comment>Keep start &amp; end space!</comment>
  </data>
  <data name="VerbalizeRecordWeeklyDaysPast" xml:space="preserve">
    <value>el </value>
    <comment>Keep trailing space!</comment>
  </data>
  <data name="VerbalizeRecordWeeklyDaysSeparator" xml:space="preserve">
    <value>, el </value>
    <comment>Keep trailing space!</comment>
  </data>
  <data name="VerbalizeRecordWeeklyEveryday" xml:space="preserve">
    <value>Grabación semanal, todos los días de todas las semanas a las {1:T}, con un margen de seguridad de {2} minutos.</value>
  </data>
  <data name="VerbalizeRecordWeeklyEveryWeeks" xml:space="preserve">
    <value>Grabación semanal, {3} cada {0} semanas a las {1:T}, con un margen de seguridad de {2} minutos.</value>
  </data>
  <data name="VerbalizeRecordWeeklyEveryWeeksEveryday" xml:space="preserve">
    <value>Grabación semanal, todos los días cada {0} semanas a las {1:T}, con un margen de seguridad de {2} minutos.</value>
  </data>
  <data name="VerbalizeStartDate" xml:space="preserve">
    <value>Comenzando a grabar el {0:D} sin fecha de finalización.</value>
  </data>
  <data name="VerbalizeStartExpiryDate" xml:space="preserve">
    <value>Comenzando a grabar el {0:D} y finalizando el {1:D}.</value>
  </data>
</root>