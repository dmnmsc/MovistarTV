// ==============================================================================
// 
//   Copyright (C) 2014-2020, GitHub/Codeplex user AlphaCentaury
//   All rights reserved.
// 
//     See 'LICENSE.MD' file (or 'license.txt' if missing) in the project root
//     for complete license information.
// 
//   http://www.alphacentaury.org/movistartv
//   https://github.com/AlphaCentaury
// 
// ==============================================================================

namespace IpTViewr.Setup.Logos.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Texts {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Texts() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("IpTViewr.Setup.Logos.Properties.Texts", typeof(Texts).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}: error {1}: {2}.
        /// </summary>
        internal static string DisplayErrorFormat {
            get {
                return ResourceManager.GetString("DisplayErrorFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}: {1} error: {2}.
        /// </summary>
        internal static string DisplayExceptionFormat {
            get {
                return ResourceManager.GetString("DisplayExceptionFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}: fatal error {1}: {2}.
        /// </summary>
        internal static string DisplayFatalErrorFormat {
            get {
                return ResourceManager.GetString("DisplayFatalErrorFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}: fatal {1} error: {2}.
        /// </summary>
        internal static string DisplayFatalExceptionFormat {
            get {
                return ResourceManager.GetString("DisplayFatalExceptionFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: No arguments have been specified.
        ///Use /HELP for more information..
        /// </summary>
        internal static string ErrorNoArguments {
            get {
                return ResourceManager.GetString("ErrorNoArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ERROR: Invalid argument format.
        ///Use /HELP for more information..
        /// </summary>
        internal static string InvalidArgumentFormat {
            get {
                return ResourceManager.GetString("InvalidArgumentFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} /input:folder [/output:folder]
        ///{0} /help | /h | /? | -help | -h | -?
        ///
        ////input:    Specifies the folder where the logos are located
        ///           DEBUG builds will try to autolocate the logos folder
        ////output:   Specifies the output folder for the packed logos and index XML 
        ///           If not specified, files are created in the current directory
        ////help      Displays this help message.
        ///
        ///-- General options --
        ////nologo     Supresses the banner.
        ///Options and switches can be specified with &apos;/&apos; or with &apos;-&apos;.
        /// </summary>
        internal static string ProgramHelp {
            get {
                return ResourceManager.GetString("ProgramHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IPTViewr logos packager utility.
        /// </summary>
        internal static string ProgramName {
            get {
                return ResourceManager.GetString("ProgramName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}
        ///Version {1}
        ///{2}. All rights reserved..
        /// </summary>
        internal static string StartLogo {
            get {
                return ResourceManager.GetString("StartLogo", resourceCulture);
            }
        }
    }
}
